package linkedlist;
/**
 * This class models a linked list in which each node has a pointer
 * to the node after it, except the tail which does not have a node after.
 * @author rkelley/njohnson/kripperda
 * Programming Project 1 Start Project
 * CS131ON
 */
public class GenericLinkedList<T> {

	private GenericNode<Integer> head; //node to represent the head of the list
	private GenericNode<Integer> tail; //node to represent the tail (end) of the list
	private int length; //variable to keep track of the number of elements in the list
	
	/**
	 * The constructor for this object initializes the list such that
	 * it is empty (no head or tail) node.
	 */
	public GenericLinkedList()
	{
		head=null;
		length=0;
		tail=head;
	}//end empty-argument constructor
	

	public GenericLinkedList(String string, String string2) {
	}

	public Integer charAt(int pos) {
		GenericNode<Integer> curr = head;
		int k = 0; 
		if (pos<length) {
			while (k<pos) {
				curr = curr.getNextNode();
				k++;
			}
		}
		return curr.getItem();
	}//end Integer method to call charAt to determine current position
	
	
	private void add(int input) {
		GenericNode<Integer> newChar = new GenericNode<>(input);
		GenericNode<Integer> temp = head;
		if (head == null) {
			head = newChar;
		}
		else {
			while (temp.getNextNode() != null) {
				temp = temp.getNextNode();
			}
			temp.setNextNode(newChar);
		}
		length++;
	}
	/**
	 * Method to see if there are any elements in the list.
	 * @return boolean true/false
	 */
	public boolean isEmpty()
	{
		if (head==null) { return true;}
		else return false;
	}//end isEmpty
	
	public int length() {
		return length;
	}//end length
	
	/**
	 * This method returns the head node of the list from which
	 * you can traverse the entire by following node links.
	 * @return
	 */
	public GenericNode<Integer> getList()
	{
		return head;
	}//end getList
		
	/**
	 * This method adds a new node to the list. It first checks to see
	 * if the list is empty. If so, it sets the head and the tail nodes
	 * to the node passed in. If the list is not empty it places the node
	 * at the end of the list and updates the pointers in the tail. This
	 * implementation does not support adding entries to the middle
	 * of the list.
	 * @param aNode
	 */
	public void addNode(GenericNode<Integer> aNode)
	{
		if (isEmpty() ) {
			head = aNode;
			tail=head;
			return;
		}
		
		tail.setNextNode(aNode);
		tail=tail.getNextNode();
		tail.setNextNode(null);
		length++;
	}//end addNode
	
	/**
	* This toString should return the output of heads and tails in the Linked List
	*/
	@Override
	public String toString() {
		String output = " ";
		GenericNode<Integer> temp = head;
		while (temp != null) {
			output = output + temp.getItem();
			temp = temp.getNextNode();
		}
		return output;
	}//end toString
	
	
}//end class
